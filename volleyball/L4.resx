<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>НИЖНЯЯ ПЕРЕДАЧА В ВОЛЕЙБОЛЕ

Нижняя передача (или прием) – это один из основных и наиболее часто используемых элементов техники волейбола, 
который позволяет игрокам принимать и контролировать мяч после подачи или удара соперника. 
Этот навык требует хорошей техники, координации и быстроты реакции. 
Вот подробное объяснение, как правильно выполнить нижнюю передачу:

ПОДГОТОВКА

1. Позиция тела:
   - Стойте в удобной и устойчивой позиции, ноги на ширине плеч.
   - Одна нога может быть немного впереди для улучшения баланса.
   - Колени согнуты, чтобы снизить центр тяжести и обеспечить устойчивость.
   - Тело слегка наклонено вперед, вес распределен на носки.

2. Руки и кисти:
   - Сложите руки вместе так, чтобы большие пальцы были параллельны друг другу, а ладони повёрнуты вверх.
   - Присоедините одну руку к другой, соединяя большие пальцы и ладони.
   - Пальцы можно сцепить в "замок" или положить одну руку на другую.

ВЫПОЛНЕНИЕ ПЕРЕДАЧИ

1. Прием мяча:
   - Сфокусируйтесь на мяче и следите за его движением.
   - При приеме мяча убедитесь, что он контактирует с предплечьями, а не с ладонями или пальцами.
   - При контакте с мячом руки должны быть прямыми, чтобы обеспечить хороший контроль и направление мяча.

2. Позиция рук:
   - Руки должны быть параллельны друг другу, предплечья образуют ровную поверхность.
   - Держите руки крепко, но расслаблено, чтобы смягчить удар мяча.

3. Передача мяча:
   - Используйте движение всего тела, чтобы направить мяч в нужную сторону.
   - При выполнении передачи поднимайтесь на носках и слегка выпрямляйте ноги, чтобы добавить силу передачи.
   - Следите за направлением передачи, используя движение рук и тела.

ЗАВЕРШЕНИЕ

1. Следование за мячом:
   - После передачи следите за мячом и будьте готовы к следующему действию.
   - Вернитесь в исходное положение и подготовьтесь к следующему движению.

2. Баланс и контроль:
   - Сохраняйте баланс тела на протяжении всего движения.
   - Контролируйте скорость и направление мяча с помощью движения рук и корпуса.

Нижняя передача – ключевой элемент игры в волейбол, который требует точности, контроля и координации. 
Правильное выполнение этой техники значительно улучшит вашу игру и взаимодействие с командой.</value>
  </data>
</root>